{
  "openapi": "3.0.1",
  "info": {
    "description": "A server for PERN e-commerce app.  You can find out more about it at [https://github.com/atanas-dim/ecommerce-PERN](https://github.com/atanas-dim/ecommerce-PERN).",
    "version": "1.0.0",
    "title": "PERN Store",
    "contact": {
      "email": "hi.atanasdim@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://pernstore.herokuapp.com"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "User Authentication and Authorization"
    },
    {
      "name": "users",
      "description": "Users API"
    },
    {
      "name": "products",
      "description": "Products API"
    },
    {
      "name": "carts",
      "description": "Carts API"
    },
    {
      "name": "orders",
      "description": "Orders API"
    },
    {
      "name": "payments",
      "description": "Payments API"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Create a new user account",
        "description": "",
        "requestBody": {
          "description": "User details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns object with new user details (id, email, roles, cart_id)."
          },
          "406": {
            "description": "Missing input. All fields required."
          },
          "409": {
            "description": "User with this email already exists."
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login with email and password",
        "description": "Test user: email - john@email.com password - JohnsPassword",
        "requestBody": {
          "description": "User login details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged in/authenticated successfully. Returns user details, JWT token and refreshToken"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users (admin only)",
        "description": "Array of all users as objects",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Find User by ID (admin or owner of account)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user details as single object"
          },
          "403": {
            "description": "You're not admin or owner of this account."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update User by ID (admin or owner of account)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user to update"
          }
        ],
        "requestBody": {
          "description": "User details to update (single or many)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated user details as single object"
          },
          "400": {
            "description": "Email is already taken"
          },
          "403": {
            "description": "You're not admin or owner of this account."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User by ID (admin or owner of account)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User was deleted"
          },
          "403": {
            "description": "You're not admin or owner of this account."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/products": {
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Create new product (admin only)",
        "description": "",
        "requestBody": {
          "description": "New product details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns new product details as single object"
          },
          "403": {
            "description": "Admin role required"
          },
          "406": {
            "description": "All field required (name, price, description)"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get all products",
        "description": "",
        "responses": {
          "200": {
            "description": "Returns array of products as objects"
          }
        }
      }
    },
    "/api/products/{product_id}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Find single product",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the product to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product details as single object"
          }
        }
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update single product (admin only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the product to update"
          }
        ],
        "requestBody": {
          "description": "Product details to update (single or many)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewProduct"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns updated product details as single object"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete single product (admin only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "product_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the product to update"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the product"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/carts": {
      "get": {
        "tags": [
          "carts"
        ],
        "summary": "Get all carts (admin only)",
        "description": "",
        "responses": {
          "200": {
            "description": "Returns array of cart id and user id it belongs to as objects"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/carts/{cart_id}": {
      "get": {
        "tags": [
          "carts"
        ],
        "summary": "Get single cart by id (owner only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "cart_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the cart to find"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns cart with products."
          },
          "403": {
            "description": "You're not the owner of this cart."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "carts"
        ],
        "summary": "Add product to cart (owner only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "cart_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the cart"
          }
        ],
        "requestBody": {
          "description": "Numeric ID of the product to add (quantity set to 1 if not provided)",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "product_id"
                ],
                "properties": {
                  "product_id": {
                    "type": "integer",
                    "example": 9
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 2
                  },
                  "size": {
                    "type": "integer",
                    "example": "M"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product successfully added to cart. OR Product already exists in this cart."
          },
          "403": {
            "description": "You're not the owner of this cart."
          },
          "406": {
            "description": "Product ID required. OR Quantity has to be a positive value."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "carts"
        ],
        "summary": "Update product in cart (owner only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "cart_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the cart"
          }
        ],
        "requestBody": {
          "description": "Numeric ID of the product to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "product_id",
                  "quantity"
                ],
                "properties": {
                  "product_id": {
                    "type": "integer",
                    "example": 9
                  },
                  "quantity": {
                    "type": "integer",
                    "example": 2
                  },
                  "size": {
                    "type": "integer",
                    "example": "M"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product successfully updated."
          },
          "403": {
            "description": "You're not the owner of this cart."
          },
          "404": {
            "description": "Product is still not added to this cart."
          },
          "406": {
            "description": "Product ID and quantity required."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/carts/{cart_id}/product/{product_id}": {
      "delete": {
        "tags": [
          "carts"
        ],
        "summary": "Remove product from cart (owner only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "cart_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the cart"
          },
          {
            "in": "path",
            "name": "product_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the product to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Product successfully deleted."
          },
          "403": {
            "description": "You're not the owner of this cart."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/carts/{cart_id}/checkout": {
      "post": {
        "tags": [
          "carts"
        ],
        "summary": "Checkout cart with products, make payment and create order (owner only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "cart_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the cart to find"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns object with checkout details (order_id, status, total)"
          },
          "403": {
            "description": "You're not the owner of this cart."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/orders": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get all orders (admin only)",
        "description": "",
        "responses": {
          "200": {
            "description": "Returns array of orders details as objects (id, status, total, user_id)"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/orders/{order_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get single order by id (admin only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "order_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the order to find"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns single order details (id, status, total, user_id)"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/orders/status/{order_id}": {
      "put": {
        "tags": [
          "orders"
        ],
        "summary": "Update single order status by id (admin only)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "order_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the order to find"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns single order details (id, status, total, user_id)"
          },
          "403": {
            "description": "Admin role required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/orders/user/{user_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Find single order by user id (admin or owner)",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "description": "Numeric ID of the user who owns the order"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns array of order details as objects (id, status, total, user_id)"
          },
          "403": {
            "description": "You're not admin or owner of this account."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/payments": {
      "post": {
        "tags": [
          "payments"
        ],
        "summary": "Make direct payment without going through checkout",
        "description": "",
        "requestBody": {
          "description": "Total sum to pay and user email",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "total",
                  "email"
                ],
                "properties": {
                  "total": {
                    "type": "number",
                    "example": 29.98
                  },
                  "email": {
                    "type": "string",
                    "example": "john@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment successful!"
          },
          "406": {
            "description": "Email and total price are required."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "NewUser": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "s0m3sEcr3tP@ssW0rd"
          }
        }
      },
      "UpdatedUser": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "s0m3sEcr3tP@ssW0rd"
          },
          "address1": {
            "type": "string",
            "example": "15 Pavement St"
          },
          "address2": {
            "type": "string",
            "example": "Green Gardens Court"
          },
          "postcode": {
            "type": "string",
            "example": "W99 7LL"
          },
          "city": {
            "type": "string",
            "example": "London"
          },
          "country": {
            "type": "string",
            "example": "United Kingdom"
          }
        }
      },
      "NewProduct": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "T-shirt"
          },
          "price": {
            "type": "number",
            "example": 25
          },
          "description": {
            "type": "string",
            "example": "Cotton t-shirt with printed illustration."
          },
          "images": {
            "type": "array",
            "example": [
              "https://images.unsplash.com/photo-1583743814966-8936f5b7be1a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2134&q=80",
              "https://images.unsplash.com/photo-1583743814966-8936f5b7be1a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2134&q=81",
              "https://images.unsplash.com/photo-1583743814966-8936f5b7be1a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2134&q=82"
            ]
          },
          "categories": {
            "type": "array",
            "example": [
              "men",
              "tops"
            ]
          },
          "sizes": {
            "type": "array",
            "example": [
              "XS",
              "S",
              "M",
              "L"
            ]
          }
        }
      },
      "LoginUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "JohnsPassword"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}